# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MontePython_cxx', [dirname(__file__)])
        except ImportError:
            import _MontePython_cxx
            return _MontePython_cxx
        if fp is not None:
            try:
                _mod = imp.load_module('_MontePython_cxx', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MontePython_cxx = swig_import_helper()
    del swig_import_helper
else:
    import _MontePython_cxx
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Walker(_object):
    """Proxy of C++ Walker class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Walker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Walker, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Walker self) -> Walker"""
        this = _MontePython_cxx.new_Walker()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Walker
    __del__ = lambda self : None;
    def initialize(self, *args):
        """initialize(Walker self, int no_of_particles_, int dim_, double * buffer, int buffer_size_)"""
        return _MontePython_cxx.Walker_initialize(self, *args)

    def getParticlePosition(self, *args):
        """getParticlePosition(Walker self, int i, int j) -> double"""
        return _MontePython_cxx.Walker_getParticlePosition(self, *args)

    def getNewParticlePosition(self, *args):
        """getNewParticlePosition(Walker self, int i, int j) -> double"""
        return _MontePython_cxx.Walker_getNewParticlePosition(self, *args)

    def getOPureFurther(self, *args):
        """getOPureFurther(Walker self, int i, int j) -> double"""
        return _MontePython_cxx.Walker_getOPureFurther(self, *args)

    def setParticlePosition(self, *args):
        """setParticlePosition(Walker self, int i, int j, double x)"""
        return _MontePython_cxx.Walker_setParticlePosition(self, *args)

    def updateParticlePosition(self, *args):
        """updateParticlePosition(Walker self, int i)"""
        return _MontePython_cxx.Walker_updateParticlePosition(self, *args)

    def resetParticlePosition(self, *args):
        """resetParticlePosition(Walker self, int i)"""
        return _MontePython_cxx.Walker_resetParticlePosition(self, *args)

    def getAllPositions(self):
        """getAllPositions(Walker self) -> QickArray &"""
        return _MontePython_cxx.Walker_getAllPositions(self)

    def getLocalEnergy(self, *args):
        """
        getLocalEnergy(Walker self, Func wf, Func nabla, Func nabla2, Func potential, bool update=True) -> double
        getLocalEnergy(Walker self, Func wf, Func nabla, Func nabla2, Func potential) -> double
        getLocalEnergy(Walker self, Func e_local, bool update=True) -> double
        getLocalEnergy(Walker self, Func e_local) -> double
        """
        return _MontePython_cxx.Walker_getLocalEnergy(self, *args)

    def getOtherEnergy(self, *args):
        """getOtherEnergy(Walker self, Func e_other) -> double"""
        return _MontePython_cxx.Walker_getOtherEnergy(self, *args)

    def getCoM(self):
        """getCoM(Walker self) -> double"""
        return _MontePython_cxx.Walker_getCoM(self)

    def getWaveFunction(self, *args):
        """
        getWaveFunction(Walker self, Func wf, bool update=True) -> double
        getWaveFunction(Walker self, Func wf) -> double
        """
        return _MontePython_cxx.Walker_getWaveFunction(self, *args)

    def getQuantumForce(self, *args):
        """
        getQuantumForce(Walker self, Func nabla, Func wf, bool update=True) -> QickArray
        getQuantumForce(Walker self, Func nabla, Func wf) -> QickArray
        getQuantumForce(Walker self, Func q_force, bool update=True) -> QickArray
        getQuantumForce(Walker self, Func q_force) -> QickArray &
        """
        return _MontePython_cxx.Walker_getQuantumForce(self, *args)

    def getNewQuantumForce(self, *args):
        """
        getNewQuantumForce(Walker self, Func nabla, Func wf, bool update=True) -> QickArray
        getNewQuantumForce(Walker self, Func nabla, Func wf) -> QickArray
        getNewQuantumForce(Walker self, Func q_force, bool update=True) -> QickArray
        getNewQuantumForce(Walker self, Func q_force) -> QickArray &
        """
        return _MontePython_cxx.Walker_getNewQuantumForce(self, *args)

    def getGreensFunction(self, *args):
        """
        getGreensFunction(Walker self, Func nabla, Func wf, double D, double tau) -> double
        getGreensFunction(Walker self, Func q_force, double D, double tau) -> double
        """
        return _MontePython_cxx.Walker_getGreensFunction(self, *args)

    def getNewGreensFunction(self, *args):
        """
        getNewGreensFunction(Walker self, Func nabla, Func wf, double D, double tau) -> double
        getNewGreensFunction(Walker self, Func q_force, double D, double tau) -> double
        """
        return _MontePython_cxx.Walker_getNewGreensFunction(self, *args)

    def killWalker(self):
        """killWalker(Walker self)"""
        return _MontePython_cxx.Walker_killWalker(self)

    def makeWalker(self):
        """makeWalker(Walker self)"""
        return _MontePython_cxx.Walker_makeWalker(self)

    def madeWalker(self):
        """madeWalker(Walker self)"""
        return _MontePython_cxx.Walker_madeWalker(self)

    def calmWalker(self):
        """calmWalker(Walker self)"""
        return _MontePython_cxx.Walker_calmWalker(self)

    def isDead(self):
        """isDead(Walker self) -> bool"""
        return _MontePython_cxx.Walker_isDead(self)

    def tooAlive(self):
        """tooAlive(Walker self) -> bool"""
        return _MontePython_cxx.Walker_tooAlive(self)

    def getNoOfParticles(self):
        """getNoOfParticles(Walker self) -> int"""
        return _MontePython_cxx.Walker_getNoOfParticles(self)

    def getDimension(self):
        """getDimension(Walker self) -> int"""
        return _MontePython_cxx.Walker_getDimension(self)

Walker_swigregister = _MontePython_cxx.Walker_swigregister
Walker_swigregister(Walker)

class Warray(_object):
    """Proxy of C++ Warray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Warray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Warray, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Warray self) -> Warray"""
        this = _MontePython_cxx.new_Warray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Warray
    __del__ = lambda self : None;
    def initialize(self, *args):
        """initialize(Warray self, int no_of_walkers_, int particles_, int dim_, double * a, int a_size)"""
        return _MontePython_cxx.Warray_initialize(self, *args)

    def UniDist(self, *args):
        """UniDist(Warray self, Random ran)"""
        return _MontePython_cxx.Warray_UniDist(self, *args)

    def getOFurther(self, *args):
        """getOFurther(Warray self, int i, int j, int k) -> double"""
        return _MontePython_cxx.Warray_getOFurther(self, *args)

    def MetropolisSteps(self, *args):
        """MetropolisSteps(Warray self, Random ran, Func move, Func wf, QickArray & params, QickArray & counters, double step_length)"""
        return _MontePython_cxx.Warray_MetropolisSteps(self, *args)

    def MonteCarloSteps(self, *args):
        """
        MonteCarloSteps(Warray self, Random ran, Func wf, Func wf_all, Func local_e, Func q_force, Func move, Func pot_e, 
            Func nabla, Func nabla2, QickArray & params, QickArray & counters, int metropolis, 
            double D, double tau, double e_trial, bool update, int numerical)
        """
        return _MontePython_cxx.Warray_MonteCarloSteps(self, *args)

    def getLocalEnergies(self, *args):
        """
        getLocalEnergies(Warray self, Func wf, Func nabla, Func nabla2, Func potential, bool update=True) -> double
        getLocalEnergies(Warray self, Func wf, Func nabla, Func nabla2, Func potential) -> double
        getLocalEnergies(Warray self, Func e_local, bool update=True) -> double
        getLocalEnergies(Warray self, Func e_local) -> double
        """
        return _MontePython_cxx.Warray_getLocalEnergies(self, *args)

    def getOtherEnergies(self, *args):
        """getOtherEnergies(Warray self, Func e_other) -> double"""
        return _MontePython_cxx.Warray_getOtherEnergies(self, *args)

    def walkers2grid3D(self, *args):
        """walkers2grid3D(Warray self, QickArray & grid, double dx, double dy, double dz) -> QickArray *"""
        return _MontePython_cxx.Warray_walkers2grid3D(self, *args)

    def walkers2grid3DPure(self, *args):
        """walkers2grid3DPure(Warray self, QickArray & grid, double dx, double dy, double dz, double weight) -> QickArray *"""
        return _MontePython_cxx.Warray_walkers2grid3DPure(self, *args)

    def pyInitialize(self, *args):
        """pyInitialize(Warray self, int no_of_walkers_, int particles_, int dim_, PyObject * a_) -> PyObject *"""
        return _MontePython_cxx.Warray_pyInitialize(self, *args)

    def pyWalkers2grid3D(self, *args):
        """pyWalkers2grid3D(Warray self, PyObject * a_, double dx, double dy, double dz) -> PyObject *"""
        return _MontePython_cxx.Warray_pyWalkers2grid3D(self, *args)

    def pyWalkers2grid3DPure(self, *args):
        """pyWalkers2grid3DPure(Warray self, PyObject * a_, double dx, double dy, double dz, double weight) -> PyObject *"""
        return _MontePython_cxx.Warray_pyWalkers2grid3DPure(self, *args)

Warray_swigregister = _MontePython_cxx.Warray_swigregister
Warray_swigregister(Warray)

class Func(_object):
    """Proxy of C++ Func class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Func, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Func, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _MontePython_cxx.delete_Func
    __del__ = lambda self : None;
    def setParams(self, *args):
        """setParams(Func self, QickArray & params_)"""
        return _MontePython_cxx.Func_setParams(self, *args)

    def getImpossible(self):
        """getImpossible(Func self) -> bool"""
        return _MontePython_cxx.Func_getImpossible(self)

    def valuePt(self, *args):
        """
        valuePt(Func self, double x, double y) -> double
        valuePt(Func self, QickArray & pos) -> double
        valuePt(Func self, QickArray & pos, int dummy) -> double
        valuePt(Func self, QickArray & pos, int i, Random ran) -> QickArray
        valuePt(Func self, QickArray & pos, int i, QickArray & x, Random ran) -> QickArray
        valuePt(Func self, QickArray & pos, bool dummy) -> QickArray
        valuePt(Func self, Func func, QickArray & pos) -> double
        valuePt(Func self, QickArray & pos, Func func) -> QickArray
        valuePt(Func self, QickArray & pos, double x) -> QickArray &
        """
        return _MontePython_cxx.Func_valuePt(self, *args)

    def __call__(self, *args):
        """
        __call__(Func self, double x, double y) -> double
        __call__(Func self, QickArray & pos) -> double
        __call__(Func self, QickArray & pos, int i, Random ran) -> QickArray
        __call__(Func self, QickArray & pos, int i, QickArray & x, Random ran) -> QickArray
        __call__(Func self, QickArray & pos, bool dummy) -> QickArray
        __call__(Func self, Func func, QickArray & pos) -> double
        __call__(Func self, QickArray & pos, Func func) -> QickArray
        __call__(Func self, QickArray & pos, double x) -> QickArray &
        """
        return _MontePython_cxx.Func___call__(self, *args)

    def sqr(self, *args):
        """sqr(Func self, double x) -> double"""
        return _MontePython_cxx.Func_sqr(self, *args)

    def __init__(self): 
        """__init__(Func self) -> Func"""
        this = _MontePython_cxx.new_Func()
        try: self.this.append(this)
        except: self.this = this
Func_swigregister = _MontePython_cxx.Func_swigregister
Func_swigregister(Func)

class Nabla(Func):
    """Proxy of C++ Nabla class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nabla, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nabla, name)
    __repr__ = _swig_repr
    def valuePt(self, *args):
        """valuePt(Nabla self, QickArray & pos, Func func) -> QickArray &"""
        return _MontePython_cxx.Nabla_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Nabla self, QickArray & pos, Func func) -> QickArray &"""
        return _MontePython_cxx.Nabla___call__(self, *args)

    def __init__(self): 
        """__init__(Nabla self) -> Nabla"""
        this = _MontePython_cxx.new_Nabla()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Nabla
    __del__ = lambda self : None;
Nabla_swigregister = _MontePython_cxx.Nabla_swigregister
Nabla_swigregister(Nabla)

class Nabla2(Func):
    """Proxy of C++ Nabla2 class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nabla2, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nabla2, name)
    __repr__ = _swig_repr
    def valuePt(self, *args):
        """valuePt(Nabla2 self, Func func, QickArray & pos) -> double"""
        return _MontePython_cxx.Nabla2_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Nabla2 self, Func func, QickArray & pos) -> double"""
        return _MontePython_cxx.Nabla2___call__(self, *args)

    def __init__(self): 
        """__init__(Nabla2 self) -> Nabla2"""
        this = _MontePython_cxx.new_Nabla2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Nabla2
    __del__ = lambda self : None;
Nabla2_swigregister = _MontePython_cxx.Nabla2_swigregister
Nabla2_swigregister(Nabla2)

class Wave(Func):
    """Proxy of C++ Wave class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wave, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Wave, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(Wave self, QickArray & params_)"""
        return _MontePython_cxx.Wave_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(Wave self, QickArray & pos) -> double"""
        return _MontePython_cxx.Wave_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Wave self, QickArray & pos) -> double"""
        return _MontePython_cxx.Wave___call__(self, *args)

    def __init__(self): 
        """__init__(Wave self) -> Wave"""
        this = _MontePython_cxx.new_Wave()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Wave
    __del__ = lambda self : None;
Wave_swigregister = _MontePython_cxx.Wave_swigregister
Wave_swigregister(Wave)

class Wave1s(Wave):
    """Proxy of C++ Wave1s class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wave1s, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Wave1s, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(Wave1s self, QickArray & params_)"""
        return _MontePython_cxx.Wave1s_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(Wave1s self, QickArray & pos) -> double"""
        return _MontePython_cxx.Wave1s_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Wave1s self, QickArray & pos) -> double"""
        return _MontePython_cxx.Wave1s___call__(self, *args)

    def __init__(self): 
        """__init__(Wave1s self) -> Wave1s"""
        this = _MontePython_cxx.new_Wave1s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Wave1s
    __del__ = lambda self : None;
Wave1s_swigregister = _MontePython_cxx.Wave1s_swigregister
Wave1s_swigregister(Wave1s)

class Correlation(Wave):
    """Proxy of C++ Correlation class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Correlation, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Correlation, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(Correlation self, QickArray & params_)"""
        return _MontePython_cxx.Correlation_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(Correlation self, QickArray & pos) -> double"""
        return _MontePython_cxx.Correlation_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Correlation self, QickArray & pos) -> double"""
        return _MontePython_cxx.Correlation___call__(self, *args)

    def __init__(self): 
        """__init__(Correlation self) -> Correlation"""
        this = _MontePython_cxx.new_Correlation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Correlation
    __del__ = lambda self : None;
Correlation_swigregister = _MontePython_cxx.Correlation_swigregister
Correlation_swigregister(Correlation)

class Helium(Wave):
    """Proxy of C++ Helium class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Helium, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Helium, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(Helium self, QickArray & params_)"""
        return _MontePython_cxx.Helium_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(Helium self, QickArray & pos) -> double"""
        return _MontePython_cxx.Helium_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Helium self, QickArray & pos) -> double"""
        return _MontePython_cxx.Helium___call__(self, *args)

    def __init__(self): 
        """__init__(Helium self) -> Helium"""
        this = _MontePython_cxx.new_Helium()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Helium
    __del__ = lambda self : None;
Helium_swigregister = _MontePython_cxx.Helium_swigregister
Helium_swigregister(Helium)

class Dist(Func):
    """Proxy of C++ Dist class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dist, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dist, name)
    __repr__ = _swig_repr
    def valuePt(self, *args):
        """valuePt(Dist self, QickArray & pos, double l) -> QickArray &"""
        return _MontePython_cxx.Dist_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Dist self, QickArray & pos, double l) -> QickArray &"""
        return _MontePython_cxx.Dist___call__(self, *args)

    def __init__(self): 
        """__init__(Dist self) -> Dist"""
        this = _MontePython_cxx.new_Dist()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Dist
    __del__ = lambda self : None;
Dist_swigregister = _MontePython_cxx.Dist_swigregister
Dist_swigregister(Dist)

class DuBoisWave(Wave):
    """Proxy of C++ DuBoisWave class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisWave, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisWave, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisWave self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisWave_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(DuBoisWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisWave_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisWave___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisWave self) -> DuBoisWave"""
        this = _MontePython_cxx.new_DuBoisWave()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisWave
    __del__ = lambda self : None;
DuBoisWave_swigregister = _MontePython_cxx.DuBoisWave_swigregister
DuBoisWave_swigregister(DuBoisWave)

class DuBoisGauss(DuBoisWave):
    """Proxy of C++ DuBoisGauss class"""
    __swig_setmethods__ = {}
    for _s in [DuBoisWave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [DuBoisWave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisGauss, name)
    __repr__ = _swig_repr
    def valuePt(self, *args):
        """valuePt(DuBoisGauss self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisGauss_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisGauss self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisGauss___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisGauss self) -> DuBoisGauss"""
        this = _MontePython_cxx.new_DuBoisGauss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisGauss
    __del__ = lambda self : None;
DuBoisGauss_swigregister = _MontePython_cxx.DuBoisGauss_swigregister
DuBoisGauss_swigregister(DuBoisGauss)

class DuBoisJastrow(DuBoisWave):
    """Proxy of C++ DuBoisJastrow class"""
    __swig_setmethods__ = {}
    for _s in [DuBoisWave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisJastrow, name, value)
    __swig_getmethods__ = {}
    for _s in [DuBoisWave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisJastrow, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisJastrow self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisJastrow_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(DuBoisJastrow self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisJastrow_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisJastrow self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisJastrow___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisJastrow self) -> DuBoisJastrow"""
        this = _MontePython_cxx.new_DuBoisJastrow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisJastrow
    __del__ = lambda self : None;
DuBoisJastrow_swigregister = _MontePython_cxx.DuBoisJastrow_swigregister
DuBoisJastrow_swigregister(DuBoisJastrow)

class DuBoisWaveAll(Wave):
    """Proxy of C++ DuBoisWaveAll class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisWaveAll, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisWaveAll, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisWaveAll self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisWaveAll_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(DuBoisWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisWaveAll_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisWaveAll___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisWaveAll self) -> DuBoisWaveAll"""
        this = _MontePython_cxx.new_DuBoisWaveAll()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisWaveAll
    __del__ = lambda self : None;
DuBoisWaveAll_swigregister = _MontePython_cxx.DuBoisWaveAll_swigregister
DuBoisWaveAll_swigregister(DuBoisWaveAll)

class DuBoisQForce(Func):
    """Proxy of C++ DuBoisQForce class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisQForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisQForce, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisQForce self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisQForce_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(DuBoisQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.DuBoisQForce_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.DuBoisQForce___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisQForce self) -> DuBoisQForce"""
        this = _MontePython_cxx.new_DuBoisQForce()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisQForce
    __del__ = lambda self : None;
DuBoisQForce_swigregister = _MontePython_cxx.DuBoisQForce_swigregister
DuBoisQForce_swigregister(DuBoisQForce)

class DuBoisLocalEnergy(Func):
    """Proxy of C++ DuBoisLocalEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisLocalEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisLocalEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisLocalEnergy self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisLocalEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """
        valuePt(DuBoisLocalEnergy self, QickArray & pos) -> double
        valuePt(DuBoisLocalEnergy self, QickArray & pos, int dummy) -> double
        """
        return _MontePython_cxx.DuBoisLocalEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisLocalEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisLocalEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisLocalEnergy self) -> DuBoisLocalEnergy"""
        this = _MontePython_cxx.new_DuBoisLocalEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisLocalEnergy
    __del__ = lambda self : None;
DuBoisLocalEnergy_swigregister = _MontePython_cxx.DuBoisLocalEnergy_swigregister
DuBoisLocalEnergy_swigregister(DuBoisLocalEnergy)

class DuBoisPotentialEnergy(Func):
    """Proxy of C++ DuBoisPotentialEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisPotentialEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisPotentialEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisPotentialEnergy self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisPotentialEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(DuBoisPotentialEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisPotentialEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisPotentialEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisPotentialEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisPotentialEnergy self) -> DuBoisPotentialEnergy"""
        this = _MontePython_cxx.new_DuBoisPotentialEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisPotentialEnergy
    __del__ = lambda self : None;
DuBoisPotentialEnergy_swigregister = _MontePython_cxx.DuBoisPotentialEnergy_swigregister
DuBoisPotentialEnergy_swigregister(DuBoisPotentialEnergy)

class DuBoisVortexWave(Wave):
    """Proxy of C++ DuBoisVortexWave class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisVortexWave, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisVortexWave, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisVortexWave self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisVortexWave_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(DuBoisVortexWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisVortexWave_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisVortexWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisVortexWave___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisVortexWave self) -> DuBoisVortexWave"""
        this = _MontePython_cxx.new_DuBoisVortexWave()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisVortexWave
    __del__ = lambda self : None;
DuBoisVortexWave_swigregister = _MontePython_cxx.DuBoisVortexWave_swigregister
DuBoisVortexWave_swigregister(DuBoisVortexWave)

class DuBoisVortexWaveAll(Wave):
    """Proxy of C++ DuBoisVortexWaveAll class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisVortexWaveAll, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisVortexWaveAll, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisVortexWaveAll self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisVortexWaveAll_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(DuBoisVortexWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisVortexWaveAll_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisVortexWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisVortexWaveAll___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisVortexWaveAll self) -> DuBoisVortexWaveAll"""
        this = _MontePython_cxx.new_DuBoisVortexWaveAll()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisVortexWaveAll
    __del__ = lambda self : None;
DuBoisVortexWaveAll_swigregister = _MontePython_cxx.DuBoisVortexWaveAll_swigregister
DuBoisVortexWaveAll_swigregister(DuBoisVortexWaveAll)

class DuBoisVortexQForce(Func):
    """Proxy of C++ DuBoisVortexQForce class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisVortexQForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisVortexQForce, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisVortexQForce self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisVortexQForce_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(DuBoisVortexQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.DuBoisVortexQForce_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisVortexQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.DuBoisVortexQForce___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisVortexQForce self) -> DuBoisVortexQForce"""
        this = _MontePython_cxx.new_DuBoisVortexQForce()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisVortexQForce
    __del__ = lambda self : None;
DuBoisVortexQForce_swigregister = _MontePython_cxx.DuBoisVortexQForce_swigregister
DuBoisVortexQForce_swigregister(DuBoisVortexQForce)

class DuBoisVortexLocalEnergy(Func):
    """Proxy of C++ DuBoisVortexLocalEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisVortexLocalEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisVortexLocalEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisVortexLocalEnergy self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisVortexLocalEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """
        valuePt(DuBoisVortexLocalEnergy self, QickArray & pos) -> double
        valuePt(DuBoisVortexLocalEnergy self, QickArray & pos, int dummy) -> double
        """
        return _MontePython_cxx.DuBoisVortexLocalEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisVortexLocalEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisVortexLocalEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisVortexLocalEnergy self) -> DuBoisVortexLocalEnergy"""
        this = _MontePython_cxx.new_DuBoisVortexLocalEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisVortexLocalEnergy
    __del__ = lambda self : None;
DuBoisVortexLocalEnergy_swigregister = _MontePython_cxx.DuBoisVortexLocalEnergy_swigregister
DuBoisVortexLocalEnergy_swigregister(DuBoisVortexLocalEnergy)

class DuBoisVortexPotentialEnergy(Func):
    """Proxy of C++ DuBoisVortexPotentialEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisVortexPotentialEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisVortexPotentialEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisVortexPotentialEnergy self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisVortexPotentialEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(DuBoisVortexPotentialEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisVortexPotentialEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisVortexPotentialEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisVortexPotentialEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisVortexPotentialEnergy self) -> DuBoisVortexPotentialEnergy"""
        this = _MontePython_cxx.new_DuBoisVortexPotentialEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisVortexPotentialEnergy
    __del__ = lambda self : None;
DuBoisVortexPotentialEnergy_swigregister = _MontePython_cxx.DuBoisVortexPotentialEnergy_swigregister
DuBoisVortexPotentialEnergy_swigregister(DuBoisVortexPotentialEnergy)

class DuBoisVortexExcitationEnergy(Func):
    """Proxy of C++ DuBoisVortexExcitationEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisVortexExcitationEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisVortexExcitationEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisVortexExcitationEnergy self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisVortexExcitationEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(DuBoisVortexExcitationEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisVortexExcitationEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(DuBoisVortexExcitationEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.DuBoisVortexExcitationEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisVortexExcitationEnergy self) -> DuBoisVortexExcitationEnergy"""
        this = _MontePython_cxx.new_DuBoisVortexExcitationEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisVortexExcitationEnergy
    __del__ = lambda self : None;
DuBoisVortexExcitationEnergy_swigregister = _MontePython_cxx.DuBoisVortexExcitationEnergy_swigregister
DuBoisVortexExcitationEnergy_swigregister(DuBoisVortexExcitationEnergy)

class ReattoVortexWave(Wave):
    """Proxy of C++ ReattoVortexWave class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReattoVortexWave, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReattoVortexWave, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(ReattoVortexWave self, QickArray & params_)"""
        return _MontePython_cxx.ReattoVortexWave_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(ReattoVortexWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.ReattoVortexWave_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(ReattoVortexWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.ReattoVortexWave___call__(self, *args)

    def __init__(self): 
        """__init__(ReattoVortexWave self) -> ReattoVortexWave"""
        this = _MontePython_cxx.new_ReattoVortexWave()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_ReattoVortexWave
    __del__ = lambda self : None;
ReattoVortexWave_swigregister = _MontePython_cxx.ReattoVortexWave_swigregister
ReattoVortexWave_swigregister(ReattoVortexWave)

class ReattoVortexWaveAll(Wave):
    """Proxy of C++ ReattoVortexWaveAll class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReattoVortexWaveAll, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReattoVortexWaveAll, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(ReattoVortexWaveAll self, QickArray & params_)"""
        return _MontePython_cxx.ReattoVortexWaveAll_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(ReattoVortexWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.ReattoVortexWaveAll_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(ReattoVortexWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.ReattoVortexWaveAll___call__(self, *args)

    def __init__(self): 
        """__init__(ReattoVortexWaveAll self) -> ReattoVortexWaveAll"""
        this = _MontePython_cxx.new_ReattoVortexWaveAll()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_ReattoVortexWaveAll
    __del__ = lambda self : None;
ReattoVortexWaveAll_swigregister = _MontePython_cxx.ReattoVortexWaveAll_swigregister
ReattoVortexWaveAll_swigregister(ReattoVortexWaveAll)

class ReattoVortexQForce(Func):
    """Proxy of C++ ReattoVortexQForce class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReattoVortexQForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReattoVortexQForce, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(ReattoVortexQForce self, QickArray & params_)"""
        return _MontePython_cxx.ReattoVortexQForce_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(ReattoVortexQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.ReattoVortexQForce_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(ReattoVortexQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.ReattoVortexQForce___call__(self, *args)

    def __init__(self): 
        """__init__(ReattoVortexQForce self) -> ReattoVortexQForce"""
        this = _MontePython_cxx.new_ReattoVortexQForce()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_ReattoVortexQForce
    __del__ = lambda self : None;
ReattoVortexQForce_swigregister = _MontePython_cxx.ReattoVortexQForce_swigregister
ReattoVortexQForce_swigregister(ReattoVortexQForce)

class ReattoVortexLocalEnergy(Func):
    """Proxy of C++ ReattoVortexLocalEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReattoVortexLocalEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReattoVortexLocalEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(ReattoVortexLocalEnergy self, QickArray & params_)"""
        return _MontePython_cxx.ReattoVortexLocalEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """
        valuePt(ReattoVortexLocalEnergy self, QickArray & pos) -> double
        valuePt(ReattoVortexLocalEnergy self, QickArray & pos, int dummy) -> double
        """
        return _MontePython_cxx.ReattoVortexLocalEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(ReattoVortexLocalEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.ReattoVortexLocalEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(ReattoVortexLocalEnergy self) -> ReattoVortexLocalEnergy"""
        this = _MontePython_cxx.new_ReattoVortexLocalEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_ReattoVortexLocalEnergy
    __del__ = lambda self : None;
ReattoVortexLocalEnergy_swigregister = _MontePython_cxx.ReattoVortexLocalEnergy_swigregister
ReattoVortexLocalEnergy_swigregister(ReattoVortexLocalEnergy)

class ReattoVortexPotentialEnergy(Func):
    """Proxy of C++ ReattoVortexPotentialEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReattoVortexPotentialEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReattoVortexPotentialEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(ReattoVortexPotentialEnergy self, QickArray & params_)"""
        return _MontePython_cxx.ReattoVortexPotentialEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(ReattoVortexPotentialEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.ReattoVortexPotentialEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(ReattoVortexPotentialEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.ReattoVortexPotentialEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(ReattoVortexPotentialEnergy self) -> ReattoVortexPotentialEnergy"""
        this = _MontePython_cxx.new_ReattoVortexPotentialEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_ReattoVortexPotentialEnergy
    __del__ = lambda self : None;
ReattoVortexPotentialEnergy_swigregister = _MontePython_cxx.ReattoVortexPotentialEnergy_swigregister
ReattoVortexPotentialEnergy_swigregister(ReattoVortexPotentialEnergy)

class ReattoVortexExcitationEnergy(Func):
    """Proxy of C++ ReattoVortexExcitationEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReattoVortexExcitationEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReattoVortexExcitationEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(ReattoVortexExcitationEnergy self, QickArray & params_)"""
        return _MontePython_cxx.ReattoVortexExcitationEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(ReattoVortexExcitationEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.ReattoVortexExcitationEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(ReattoVortexExcitationEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.ReattoVortexExcitationEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(ReattoVortexExcitationEnergy self) -> ReattoVortexExcitationEnergy"""
        this = _MontePython_cxx.new_ReattoVortexExcitationEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_ReattoVortexExcitationEnergy
    __del__ = lambda self : None;
ReattoVortexExcitationEnergy_swigregister = _MontePython_cxx.ReattoVortexExcitationEnergy_swigregister
ReattoVortexExcitationEnergy_swigregister(ReattoVortexExcitationEnergy)

class Reatto2VortexWave(Wave):
    """Proxy of C++ Reatto2VortexWave class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reatto2VortexWave, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reatto2VortexWave, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(Reatto2VortexWave self, QickArray & params_)"""
        return _MontePython_cxx.Reatto2VortexWave_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(Reatto2VortexWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.Reatto2VortexWave_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Reatto2VortexWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.Reatto2VortexWave___call__(self, *args)

    def __init__(self): 
        """__init__(Reatto2VortexWave self) -> Reatto2VortexWave"""
        this = _MontePython_cxx.new_Reatto2VortexWave()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Reatto2VortexWave
    __del__ = lambda self : None;
Reatto2VortexWave_swigregister = _MontePython_cxx.Reatto2VortexWave_swigregister
Reatto2VortexWave_swigregister(Reatto2VortexWave)

class Reatto2VortexWaveAll(Wave):
    """Proxy of C++ Reatto2VortexWaveAll class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reatto2VortexWaveAll, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reatto2VortexWaveAll, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(Reatto2VortexWaveAll self, QickArray & params_)"""
        return _MontePython_cxx.Reatto2VortexWaveAll_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(Reatto2VortexWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.Reatto2VortexWaveAll_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Reatto2VortexWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.Reatto2VortexWaveAll___call__(self, *args)

    def __init__(self): 
        """__init__(Reatto2VortexWaveAll self) -> Reatto2VortexWaveAll"""
        this = _MontePython_cxx.new_Reatto2VortexWaveAll()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Reatto2VortexWaveAll
    __del__ = lambda self : None;
Reatto2VortexWaveAll_swigregister = _MontePython_cxx.Reatto2VortexWaveAll_swigregister
Reatto2VortexWaveAll_swigregister(Reatto2VortexWaveAll)

class Reatto2VortexQForce(Func):
    """Proxy of C++ Reatto2VortexQForce class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reatto2VortexQForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reatto2VortexQForce, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(Reatto2VortexQForce self, QickArray & params_)"""
        return _MontePython_cxx.Reatto2VortexQForce_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(Reatto2VortexQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.Reatto2VortexQForce_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Reatto2VortexQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.Reatto2VortexQForce___call__(self, *args)

    def __init__(self): 
        """__init__(Reatto2VortexQForce self) -> Reatto2VortexQForce"""
        this = _MontePython_cxx.new_Reatto2VortexQForce()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Reatto2VortexQForce
    __del__ = lambda self : None;
Reatto2VortexQForce_swigregister = _MontePython_cxx.Reatto2VortexQForce_swigregister
Reatto2VortexQForce_swigregister(Reatto2VortexQForce)

class Reatto2VortexLocalEnergy(Func):
    """Proxy of C++ Reatto2VortexLocalEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reatto2VortexLocalEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reatto2VortexLocalEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(Reatto2VortexLocalEnergy self, QickArray & params_)"""
        return _MontePython_cxx.Reatto2VortexLocalEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """
        valuePt(Reatto2VortexLocalEnergy self, QickArray & pos) -> double
        valuePt(Reatto2VortexLocalEnergy self, QickArray & pos, int dummy) -> double
        """
        return _MontePython_cxx.Reatto2VortexLocalEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Reatto2VortexLocalEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.Reatto2VortexLocalEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(Reatto2VortexLocalEnergy self) -> Reatto2VortexLocalEnergy"""
        this = _MontePython_cxx.new_Reatto2VortexLocalEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Reatto2VortexLocalEnergy
    __del__ = lambda self : None;
Reatto2VortexLocalEnergy_swigregister = _MontePython_cxx.Reatto2VortexLocalEnergy_swigregister
Reatto2VortexLocalEnergy_swigregister(Reatto2VortexLocalEnergy)

class Reatto2VortexPotentialEnergy(Func):
    """Proxy of C++ Reatto2VortexPotentialEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reatto2VortexPotentialEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reatto2VortexPotentialEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(Reatto2VortexPotentialEnergy self, QickArray & params_)"""
        return _MontePython_cxx.Reatto2VortexPotentialEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(Reatto2VortexPotentialEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.Reatto2VortexPotentialEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Reatto2VortexPotentialEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.Reatto2VortexPotentialEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(Reatto2VortexPotentialEnergy self) -> Reatto2VortexPotentialEnergy"""
        this = _MontePython_cxx.new_Reatto2VortexPotentialEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Reatto2VortexPotentialEnergy
    __del__ = lambda self : None;
Reatto2VortexPotentialEnergy_swigregister = _MontePython_cxx.Reatto2VortexPotentialEnergy_swigregister
Reatto2VortexPotentialEnergy_swigregister(Reatto2VortexPotentialEnergy)

class Reatto2VortexExcitationEnergy(Func):
    """Proxy of C++ Reatto2VortexExcitationEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reatto2VortexExcitationEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reatto2VortexExcitationEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(Reatto2VortexExcitationEnergy self, QickArray & params_)"""
        return _MontePython_cxx.Reatto2VortexExcitationEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(Reatto2VortexExcitationEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.Reatto2VortexExcitationEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Reatto2VortexExcitationEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.Reatto2VortexExcitationEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(Reatto2VortexExcitationEnergy self) -> Reatto2VortexExcitationEnergy"""
        this = _MontePython_cxx.new_Reatto2VortexExcitationEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Reatto2VortexExcitationEnergy
    __del__ = lambda self : None;
Reatto2VortexExcitationEnergy_swigregister = _MontePython_cxx.Reatto2VortexExcitationEnergy_swigregister
Reatto2VortexExcitationEnergy_swigregister(Reatto2VortexExcitationEnergy)

class PollsKd(Func):
    """Proxy of C++ PollsKd class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PollsKd, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PollsKd, name)
    __repr__ = _swig_repr
    def valuePt(self, *args):
        """valuePt(PollsKd self, double d, double a) -> double"""
        return _MontePython_cxx.PollsKd_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(PollsKd self, double d, double a) -> double"""
        return _MontePython_cxx.PollsKd___call__(self, *args)

    def __init__(self): 
        """__init__(PollsKd self) -> PollsKd"""
        this = _MontePython_cxx.new_PollsKd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_PollsKd
    __del__ = lambda self : None;
PollsKd_swigregister = _MontePython_cxx.PollsKd_swigregister
PollsKd_swigregister(PollsKd)

class PollsWave(Wave):
    """Proxy of C++ PollsWave class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PollsWave, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PollsWave, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(PollsWave self, QickArray & params_)"""
        return _MontePython_cxx.PollsWave_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(PollsWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsWave_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(PollsWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsWave___call__(self, *args)

    def __init__(self): 
        """__init__(PollsWave self) -> PollsWave"""
        this = _MontePython_cxx.new_PollsWave()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_PollsWave
    __del__ = lambda self : None;
PollsWave_swigregister = _MontePython_cxx.PollsWave_swigregister
PollsWave_swigregister(PollsWave)

class PollsGauss(PollsWave):
    """Proxy of C++ PollsGauss class"""
    __swig_setmethods__ = {}
    for _s in [PollsWave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PollsGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [PollsWave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PollsGauss, name)
    __repr__ = _swig_repr
    def valuePt(self, *args):
        """valuePt(PollsGauss self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsGauss_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(PollsGauss self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsGauss___call__(self, *args)

    def __init__(self): 
        """__init__(PollsGauss self) -> PollsGauss"""
        this = _MontePython_cxx.new_PollsGauss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_PollsGauss
    __del__ = lambda self : None;
PollsGauss_swigregister = _MontePython_cxx.PollsGauss_swigregister
PollsGauss_swigregister(PollsGauss)

class PollsJastrow(PollsWave):
    """Proxy of C++ PollsJastrow class"""
    __swig_setmethods__ = {}
    for _s in [PollsWave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PollsJastrow, name, value)
    __swig_getmethods__ = {}
    for _s in [PollsWave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PollsJastrow, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(PollsJastrow self, QickArray & params_)"""
        return _MontePython_cxx.PollsJastrow_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(PollsJastrow self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsJastrow_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(PollsJastrow self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsJastrow___call__(self, *args)

    def __init__(self): 
        """__init__(PollsJastrow self) -> PollsJastrow"""
        this = _MontePython_cxx.new_PollsJastrow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_PollsJastrow
    __del__ = lambda self : None;
PollsJastrow_swigregister = _MontePython_cxx.PollsJastrow_swigregister
PollsJastrow_swigregister(PollsJastrow)

class PollsWaveAll(Wave):
    """Proxy of C++ PollsWaveAll class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PollsWaveAll, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PollsWaveAll, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(PollsWaveAll self, QickArray & params_)"""
        return _MontePython_cxx.PollsWaveAll_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(PollsWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsWaveAll_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(PollsWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsWaveAll___call__(self, *args)

    def __init__(self): 
        """__init__(PollsWaveAll self) -> PollsWaveAll"""
        this = _MontePython_cxx.new_PollsWaveAll()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_PollsWaveAll
    __del__ = lambda self : None;
PollsWaveAll_swigregister = _MontePython_cxx.PollsWaveAll_swigregister
PollsWaveAll_swigregister(PollsWaveAll)

class PollsQForce(Func):
    """Proxy of C++ PollsQForce class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PollsQForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PollsQForce, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(PollsQForce self, QickArray & params_)"""
        return _MontePython_cxx.PollsQForce_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(PollsQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.PollsQForce_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(PollsQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.PollsQForce___call__(self, *args)

    def __init__(self): 
        """__init__(PollsQForce self) -> PollsQForce"""
        this = _MontePython_cxx.new_PollsQForce()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_PollsQForce
    __del__ = lambda self : None;
PollsQForce_swigregister = _MontePython_cxx.PollsQForce_swigregister
PollsQForce_swigregister(PollsQForce)

class PollsLocalEnergy(Func):
    """Proxy of C++ PollsLocalEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PollsLocalEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PollsLocalEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(PollsLocalEnergy self, QickArray & params_)"""
        return _MontePython_cxx.PollsLocalEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """
        valuePt(PollsLocalEnergy self, QickArray & pos) -> double
        valuePt(PollsLocalEnergy self, QickArray & pos, int dummy) -> double
        """
        return _MontePython_cxx.PollsLocalEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(PollsLocalEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsLocalEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(PollsLocalEnergy self) -> PollsLocalEnergy"""
        this = _MontePython_cxx.new_PollsLocalEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_PollsLocalEnergy
    __del__ = lambda self : None;
PollsLocalEnergy_swigregister = _MontePython_cxx.PollsLocalEnergy_swigregister
PollsLocalEnergy_swigregister(PollsLocalEnergy)

class PollsVortexWave(Wave):
    """Proxy of C++ PollsVortexWave class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PollsVortexWave, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PollsVortexWave, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(PollsVortexWave self, QickArray & params_)"""
        return _MontePython_cxx.PollsVortexWave_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(PollsVortexWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsVortexWave_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(PollsVortexWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsVortexWave___call__(self, *args)

    def __init__(self): 
        """__init__(PollsVortexWave self) -> PollsVortexWave"""
        this = _MontePython_cxx.new_PollsVortexWave()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_PollsVortexWave
    __del__ = lambda self : None;
PollsVortexWave_swigregister = _MontePython_cxx.PollsVortexWave_swigregister
PollsVortexWave_swigregister(PollsVortexWave)

class PollsVortexWaveAll(Wave):
    """Proxy of C++ PollsVortexWaveAll class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PollsVortexWaveAll, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PollsVortexWaveAll, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(PollsVortexWaveAll self, QickArray & params_)"""
        return _MontePython_cxx.PollsVortexWaveAll_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(PollsVortexWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsVortexWaveAll_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(PollsVortexWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsVortexWaveAll___call__(self, *args)

    def __init__(self): 
        """__init__(PollsVortexWaveAll self) -> PollsVortexWaveAll"""
        this = _MontePython_cxx.new_PollsVortexWaveAll()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_PollsVortexWaveAll
    __del__ = lambda self : None;
PollsVortexWaveAll_swigregister = _MontePython_cxx.PollsVortexWaveAll_swigregister
PollsVortexWaveAll_swigregister(PollsVortexWaveAll)

class PollsVortexQForce(Func):
    """Proxy of C++ PollsVortexQForce class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PollsVortexQForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PollsVortexQForce, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(PollsVortexQForce self, QickArray & params_)"""
        return _MontePython_cxx.PollsVortexQForce_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(PollsVortexQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.PollsVortexQForce_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(PollsVortexQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.PollsVortexQForce___call__(self, *args)

    def __init__(self): 
        """__init__(PollsVortexQForce self) -> PollsVortexQForce"""
        this = _MontePython_cxx.new_PollsVortexQForce()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_PollsVortexQForce
    __del__ = lambda self : None;
PollsVortexQForce_swigregister = _MontePython_cxx.PollsVortexQForce_swigregister
PollsVortexQForce_swigregister(PollsVortexQForce)

class PollsVortexLocalEnergy(Func):
    """Proxy of C++ PollsVortexLocalEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PollsVortexLocalEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PollsVortexLocalEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(PollsVortexLocalEnergy self, QickArray & params_)"""
        return _MontePython_cxx.PollsVortexLocalEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """
        valuePt(PollsVortexLocalEnergy self, QickArray & pos) -> double
        valuePt(PollsVortexLocalEnergy self, QickArray & pos, int dummy) -> double
        """
        return _MontePython_cxx.PollsVortexLocalEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(PollsVortexLocalEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.PollsVortexLocalEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(PollsVortexLocalEnergy self) -> PollsVortexLocalEnergy"""
        this = _MontePython_cxx.new_PollsVortexLocalEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_PollsVortexLocalEnergy
    __del__ = lambda self : None;
PollsVortexLocalEnergy_swigregister = _MontePython_cxx.PollsVortexLocalEnergy_swigregister
PollsVortexLocalEnergy_swigregister(PollsVortexLocalEnergy)

class Move(Func):
    """Proxy of C++ Move class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Move, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Move, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(Move self, QickArray & params_)"""
        return _MontePython_cxx.Move_setParams(self, *args)

    def getImpossible(self):
        """getImpossible(Move self) -> bool"""
        return _MontePython_cxx.Move_getImpossible(self)

    def valuePt(self, *args):
        """
        valuePt(Move self, QickArray & pos, int i, Random ran) -> QickArray
        valuePt(Move self, QickArray & pos, int i, QickArray & x, Random ran) -> QickArray &
        """
        return _MontePython_cxx.Move_valuePt(self, *args)

    def __call__(self, *args):
        """
        __call__(Move self, QickArray & pos, int i, Random ran) -> QickArray
        __call__(Move self, QickArray & pos, int i, QickArray & x, Random ran) -> QickArray &
        """
        return _MontePython_cxx.Move___call__(self, *args)

    def __init__(self): 
        """__init__(Move self) -> Move"""
        this = _MontePython_cxx.new_Move()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Move
    __del__ = lambda self : None;
Move_swigregister = _MontePython_cxx.Move_swigregister
Move_swigregister(Move)

class DuBoisMove(Move):
    """Proxy of C++ DuBoisMove class"""
    __swig_setmethods__ = {}
    for _s in [Move]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuBoisMove, name, value)
    __swig_getmethods__ = {}
    for _s in [Move]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuBoisMove, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(DuBoisMove self, QickArray & params_)"""
        return _MontePython_cxx.DuBoisMove_setParams(self, *args)

    def getImpossible(self):
        """getImpossible(DuBoisMove self) -> bool"""
        return _MontePython_cxx.DuBoisMove_getImpossible(self)

    def valuePt(self, *args):
        """
        valuePt(DuBoisMove self, QickArray & pos, int i, Random ran) -> QickArray
        valuePt(DuBoisMove self, QickArray & pos, int i, QickArray & x, Random ran) -> QickArray &
        """
        return _MontePython_cxx.DuBoisMove_valuePt(self, *args)

    def __call__(self, *args):
        """
        __call__(DuBoisMove self, QickArray & pos, int i, Random ran) -> QickArray
        __call__(DuBoisMove self, QickArray & pos, int i, QickArray & x, Random ran) -> QickArray &
        """
        return _MontePython_cxx.DuBoisMove___call__(self, *args)

    def __init__(self): 
        """__init__(DuBoisMove self) -> DuBoisMove"""
        this = _MontePython_cxx.new_DuBoisMove()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_DuBoisMove
    __del__ = lambda self : None;
DuBoisMove_swigregister = _MontePython_cxx.DuBoisMove_swigregister
DuBoisMove_swigregister(DuBoisMove)

class LiqHe4Wave(Wave):
    """Proxy of C++ LiqHe4Wave class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiqHe4Wave, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LiqHe4Wave, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(LiqHe4Wave self, QickArray & params_)"""
        return _MontePython_cxx.LiqHe4Wave_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(LiqHe4Wave self, QickArray & pos) -> double"""
        return _MontePython_cxx.LiqHe4Wave_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(LiqHe4Wave self, QickArray & pos) -> double"""
        return _MontePython_cxx.LiqHe4Wave___call__(self, *args)

    def __init__(self): 
        """__init__(LiqHe4Wave self) -> LiqHe4Wave"""
        this = _MontePython_cxx.new_LiqHe4Wave()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_LiqHe4Wave
    __del__ = lambda self : None;
LiqHe4Wave_swigregister = _MontePython_cxx.LiqHe4Wave_swigregister
LiqHe4Wave_swigregister(LiqHe4Wave)

class LiqHe4WaveAll(Wave):
    """Proxy of C++ LiqHe4WaveAll class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiqHe4WaveAll, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LiqHe4WaveAll, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(LiqHe4WaveAll self, QickArray & params_)"""
        return _MontePython_cxx.LiqHe4WaveAll_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(LiqHe4WaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.LiqHe4WaveAll_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(LiqHe4WaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.LiqHe4WaveAll___call__(self, *args)

    def __init__(self): 
        """__init__(LiqHe4WaveAll self) -> LiqHe4WaveAll"""
        this = _MontePython_cxx.new_LiqHe4WaveAll()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_LiqHe4WaveAll
    __del__ = lambda self : None;
LiqHe4WaveAll_swigregister = _MontePython_cxx.LiqHe4WaveAll_swigregister
LiqHe4WaveAll_swigregister(LiqHe4WaveAll)

class LiqHe4QForceNum(Func):
    """Proxy of C++ LiqHe4QForceNum class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiqHe4QForceNum, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LiqHe4QForceNum, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(LiqHe4QForceNum self, QickArray & params_)"""
        return _MontePython_cxx.LiqHe4QForceNum_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(LiqHe4QForceNum self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.LiqHe4QForceNum_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(LiqHe4QForceNum self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.LiqHe4QForceNum___call__(self, *args)

    def __init__(self): 
        """__init__(LiqHe4QForceNum self) -> LiqHe4QForceNum"""
        this = _MontePython_cxx.new_LiqHe4QForceNum()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_LiqHe4QForceNum
    __del__ = lambda self : None;
LiqHe4QForceNum_swigregister = _MontePython_cxx.LiqHe4QForceNum_swigregister
LiqHe4QForceNum_swigregister(LiqHe4QForceNum)

class LiqHe4WfExp(LiqHe4QForceNum):
    """Proxy of C++ LiqHe4WfExp class"""
    __swig_setmethods__ = {}
    for _s in [LiqHe4QForceNum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiqHe4WfExp, name, value)
    __swig_getmethods__ = {}
    for _s in [LiqHe4QForceNum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LiqHe4WfExp, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(LiqHe4WfExp self, QickArray & params_)"""
        return _MontePython_cxx.LiqHe4WfExp_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(LiqHe4WfExp self, QickArray & pos) -> double"""
        return _MontePython_cxx.LiqHe4WfExp_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(LiqHe4WfExp self, QickArray & pos) -> double"""
        return _MontePython_cxx.LiqHe4WfExp___call__(self, *args)

    def __init__(self): 
        """__init__(LiqHe4WfExp self) -> LiqHe4WfExp"""
        this = _MontePython_cxx.new_LiqHe4WfExp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_LiqHe4WfExp
    __del__ = lambda self : None;
LiqHe4WfExp_swigregister = _MontePython_cxx.LiqHe4WfExp_swigregister
LiqHe4WfExp_swigregister(LiqHe4WfExp)

class LiqHe4QForce(Func):
    """Proxy of C++ LiqHe4QForce class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiqHe4QForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LiqHe4QForce, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(LiqHe4QForce self, QickArray & params_)"""
        return _MontePython_cxx.LiqHe4QForce_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(LiqHe4QForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.LiqHe4QForce_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(LiqHe4QForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.LiqHe4QForce___call__(self, *args)

    def __init__(self): 
        """__init__(LiqHe4QForce self) -> LiqHe4QForce"""
        this = _MontePython_cxx.new_LiqHe4QForce()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_LiqHe4QForce
    __del__ = lambda self : None;
LiqHe4QForce_swigregister = _MontePython_cxx.LiqHe4QForce_swigregister
LiqHe4QForce_swigregister(LiqHe4QForce)

class LiqHe4LocalEnergy(Func):
    """Proxy of C++ LiqHe4LocalEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiqHe4LocalEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LiqHe4LocalEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(LiqHe4LocalEnergy self, QickArray & params_)"""
        return _MontePython_cxx.LiqHe4LocalEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(LiqHe4LocalEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.LiqHe4LocalEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(LiqHe4LocalEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.LiqHe4LocalEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(LiqHe4LocalEnergy self) -> LiqHe4LocalEnergy"""
        this = _MontePython_cxx.new_LiqHe4LocalEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_LiqHe4LocalEnergy
    __del__ = lambda self : None;
LiqHe4LocalEnergy_swigregister = _MontePython_cxx.LiqHe4LocalEnergy_swigregister
LiqHe4LocalEnergy_swigregister(LiqHe4LocalEnergy)

class Potential(Func):
    """Proxy of C++ Potential class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Potential, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Potential, name)
    __repr__ = _swig_repr
    def valuePt(self, *args):
        """valuePt(Potential self, QickArray & pos) -> double"""
        return _MontePython_cxx.Potential_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(Potential self, QickArray & pos) -> double"""
        return _MontePython_cxx.Potential___call__(self, *args)

    def __init__(self): 
        """__init__(Potential self) -> Potential"""
        this = _MontePython_cxx.new_Potential()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_Potential
    __del__ = lambda self : None;
Potential_swigregister = _MontePython_cxx.Potential_swigregister
Potential_swigregister(Potential)

class MateuszWave(Wave):
    """Proxy of C++ MateuszWave class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MateuszWave, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MateuszWave, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(MateuszWave self, QickArray & params_)"""
        return _MontePython_cxx.MateuszWave_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(MateuszWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.MateuszWave_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(MateuszWave self, QickArray & pos) -> double"""
        return _MontePython_cxx.MateuszWave___call__(self, *args)

    def __init__(self): 
        """__init__(MateuszWave self) -> MateuszWave"""
        this = _MontePython_cxx.new_MateuszWave()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_MateuszWave
    __del__ = lambda self : None;
MateuszWave_swigregister = _MontePython_cxx.MateuszWave_swigregister
MateuszWave_swigregister(MateuszWave)

class MateuszWaveAll(Wave):
    """Proxy of C++ MateuszWaveAll class"""
    __swig_setmethods__ = {}
    for _s in [Wave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MateuszWaveAll, name, value)
    __swig_getmethods__ = {}
    for _s in [Wave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MateuszWaveAll, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(MateuszWaveAll self, QickArray & params_)"""
        return _MontePython_cxx.MateuszWaveAll_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(MateuszWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.MateuszWaveAll_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(MateuszWaveAll self, QickArray & pos) -> double"""
        return _MontePython_cxx.MateuszWaveAll___call__(self, *args)

    def __init__(self): 
        """__init__(MateuszWaveAll self) -> MateuszWaveAll"""
        this = _MontePython_cxx.new_MateuszWaveAll()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_MateuszWaveAll
    __del__ = lambda self : None;
MateuszWaveAll_swigregister = _MontePython_cxx.MateuszWaveAll_swigregister
MateuszWaveAll_swigregister(MateuszWaveAll)

class MateuszQForce(Func):
    """Proxy of C++ MateuszQForce class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MateuszQForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MateuszQForce, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(MateuszQForce self, QickArray & params_)"""
        return _MontePython_cxx.MateuszQForce_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(MateuszQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.MateuszQForce_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(MateuszQForce self, QickArray & pos, bool dummy) -> QickArray &"""
        return _MontePython_cxx.MateuszQForce___call__(self, *args)

    def __init__(self): 
        """__init__(MateuszQForce self) -> MateuszQForce"""
        this = _MontePython_cxx.new_MateuszQForce()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_MateuszQForce
    __del__ = lambda self : None;
MateuszQForce_swigregister = _MontePython_cxx.MateuszQForce_swigregister
MateuszQForce_swigregister(MateuszQForce)

class MateuszLocalEnergy(Func):
    """Proxy of C++ MateuszLocalEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MateuszLocalEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MateuszLocalEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(MateuszLocalEnergy self, QickArray & params_)"""
        return _MontePython_cxx.MateuszLocalEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(MateuszLocalEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.MateuszLocalEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(MateuszLocalEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.MateuszLocalEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(MateuszLocalEnergy self) -> MateuszLocalEnergy"""
        this = _MontePython_cxx.new_MateuszLocalEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_MateuszLocalEnergy
    __del__ = lambda self : None;
MateuszLocalEnergy_swigregister = _MontePython_cxx.MateuszLocalEnergy_swigregister
MateuszLocalEnergy_swigregister(MateuszLocalEnergy)

class MateuszPotentialEnergy(Func):
    """Proxy of C++ MateuszPotentialEnergy class"""
    __swig_setmethods__ = {}
    for _s in [Func]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MateuszPotentialEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [Func]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MateuszPotentialEnergy, name)
    __repr__ = _swig_repr
    def setParams(self, *args):
        """setParams(MateuszPotentialEnergy self, QickArray & params_)"""
        return _MontePython_cxx.MateuszPotentialEnergy_setParams(self, *args)

    def valuePt(self, *args):
        """valuePt(MateuszPotentialEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.MateuszPotentialEnergy_valuePt(self, *args)

    def __call__(self, *args):
        """__call__(MateuszPotentialEnergy self, QickArray & pos) -> double"""
        return _MontePython_cxx.MateuszPotentialEnergy___call__(self, *args)

    def __init__(self): 
        """__init__(MateuszPotentialEnergy self) -> MateuszPotentialEnergy"""
        this = _MontePython_cxx.new_MateuszPotentialEnergy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_MateuszPotentialEnergy
    __del__ = lambda self : None;
MateuszPotentialEnergy_swigregister = _MontePython_cxx.MateuszPotentialEnergy_swigregister
MateuszPotentialEnergy_swigregister(MateuszPotentialEnergy)

class Random(_object):
    """Proxy of C++ Random class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Random, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Random, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Random self) -> Random
        __init__(Random self, long idum_) -> Random
        """
        this = _MontePython_cxx.new_Random(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_idum(self):
        """get_idum(Random self) -> long"""
        return _MontePython_cxx.Random_get_idum(self)

    def gran(self, *args):
        """gran(Random self, double s=.1, double m=.5) -> double"""
        return _MontePython_cxx.Random_gran(self, *args)

    def ran1(self):
        """ran1(Random self) -> double"""
        return _MontePython_cxx.Random_ran1(self)

    __swig_destroy__ = _MontePython_cxx.delete_Random
    __del__ = lambda self : None;
Random_swigregister = _MontePython_cxx.Random_swigregister
Random_swigregister(Random)

class Convert_QickArray(_object):
    """Proxy of C++ Convert_QickArray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Convert_QickArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Convert_QickArray, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Convert_QickArray self) -> Convert_QickArray"""
        this = _MontePython_cxx.new_Convert_QickArray()
        try: self.this.append(this)
        except: self.this = this
    def my2py(self, *args):
        """my2py(Convert_QickArray self, QickArray & a) -> PyObject *"""
        return _MontePython_cxx.Convert_QickArray_my2py(self, *args)

    def py2my(self, *args):
        """py2my(Convert_QickArray self, PyObject * a) -> QickArray *"""
        return _MontePython_cxx.Convert_QickArray_py2my(self, *args)

    def my2py_copy(self, *args):
        """my2py_copy(Convert_QickArray self, QickArray & a) -> PyObject *"""
        return _MontePython_cxx.Convert_QickArray_my2py_copy(self, *args)

    def py2my_copy(self, *args):
        """py2my_copy(Convert_QickArray self, PyObject * a) -> QickArray *"""
        return _MontePython_cxx.Convert_QickArray_py2my_copy(self, *args)

    def dump(self, *args):
        """dump(Convert_QickArray self, QickArray & a)"""
        return _MontePython_cxx.Convert_QickArray_dump(self, *args)

    __swig_destroy__ = _MontePython_cxx.delete_Convert_QickArray
    __del__ = lambda self : None;
Convert_QickArray_swigregister = _MontePython_cxx.Convert_QickArray_swigregister
Convert_QickArray_swigregister(Convert_QickArray)

class MCpp(_object):
    """Proxy of C++ MCpp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCpp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCpp, name)
    __repr__ = _swig_repr
    def MetropolisStep(self, *args):
        """
        MetropolisStep(MCpp self, Walker walker, Random ran, Func move, Func wf, QickArray & params, QickArray & counters, 
            double step_length)
        """
        return _MontePython_cxx.MCpp_MetropolisStep(self, *args)

    def diffuse(self, *args):
        """
        diffuse(MCpp self, Walker walker, Random ran, Func q_force, Func wf_all, Func nabla, QickArray & params, 
            QickArray & counters, int numerical, double wf_x, double wf_y, double D, 
            double tau) -> bool
        """
        return _MontePython_cxx.MCpp_diffuse(self, *args)

    def branch(self, *args):
        """
        branch(MCpp self, Walker walker, Random ran, Func local_e, Func pot_e, Func wf, Func wf_all, Func nabla, 
            Func nabla2, int numerical, double tau, double e_local_x, double e_trial)
        """
        return _MontePython_cxx.MCpp_branch(self, *args)

    def MonteCarloStep(self, *args):
        """
        MonteCarloStep(MCpp self, Walker walker, Random ran, Func wf, Func wf_all, Func local_e, Func q_force, Func move, 
            Func pot_e, Func nabla, Func nabla2, QickArray & params, QickArray & counters, 
            int metropolis, double D, double tau, double e_trial, bool update, 
            int numerical)
        """
        return _MontePython_cxx.MCpp_MonteCarloStep(self, *args)

    def __init__(self): 
        """__init__(MCpp self) -> MCpp"""
        this = _MontePython_cxx.new_MCpp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MontePython_cxx.delete_MCpp
    __del__ = lambda self : None;
MCpp_swigregister = _MontePython_cxx.MCpp_swigregister
MCpp_swigregister(MCpp)

class RngStream(_object):
    """Proxy of C++ RngStream class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RngStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RngStream, name)
    __repr__ = _swig_repr
    def __init__(self, name=""): 
        """
        __init__(RngStream self, char const * name="") -> RngStream
        __init__(RngStream self) -> RngStream
        """
        this = _MontePython_cxx.new_RngStream(name)
        try: self.this.append(this)
        except: self.this = this
    def SetPackageSeed(*args):
        """SetPackageSeed(unsigned long const [6] seed) -> bool"""
        return _MontePython_cxx.RngStream_SetPackageSeed(*args)

    if _newclass:SetPackageSeed = staticmethod(SetPackageSeed)
    __swig_getmethods__["SetPackageSeed"] = lambda x: SetPackageSeed
    def ResetStartStream(self):
        """ResetStartStream(RngStream self)"""
        return _MontePython_cxx.RngStream_ResetStartStream(self)

    def ResetStartSubstream(self):
        """ResetStartSubstream(RngStream self)"""
        return _MontePython_cxx.RngStream_ResetStartSubstream(self)

    def ResetNextSubstream(self):
        """ResetNextSubstream(RngStream self)"""
        return _MontePython_cxx.RngStream_ResetNextSubstream(self)

    def SetAntithetic(self, *args):
        """SetAntithetic(RngStream self, bool a)"""
        return _MontePython_cxx.RngStream_SetAntithetic(self, *args)

    def IncreasedPrecis(self, *args):
        """IncreasedPrecis(RngStream self, bool incp)"""
        return _MontePython_cxx.RngStream_IncreasedPrecis(self, *args)

    def SetSeed(self, *args):
        """SetSeed(RngStream self, unsigned long const [6] seed) -> bool"""
        return _MontePython_cxx.RngStream_SetSeed(self, *args)

    def AdvanceState(self, *args):
        """AdvanceState(RngStream self, long e, long c)"""
        return _MontePython_cxx.RngStream_AdvanceState(self, *args)

    def GetState(self, *args):
        """GetState(RngStream self, unsigned long [6] seed)"""
        return _MontePython_cxx.RngStream_GetState(self, *args)

    def WriteState(self):
        """WriteState(RngStream self)"""
        return _MontePython_cxx.RngStream_WriteState(self)

    def WriteStateFull(self):
        """WriteStateFull(RngStream self)"""
        return _MontePython_cxx.RngStream_WriteStateFull(self)

    def RandU01(self):
        """RandU01(RngStream self) -> double"""
        return _MontePython_cxx.RngStream_RandU01(self)

    def RandInt(self, *args):
        """RandInt(RngStream self, int i, int j) -> int"""
        return _MontePython_cxx.RngStream_RandInt(self, *args)

    __swig_destroy__ = _MontePython_cxx.delete_RngStream
    __del__ = lambda self : None;
RngStream_swigregister = _MontePython_cxx.RngStream_swigregister
RngStream_swigregister(RngStream)

def RngStream_SetPackageSeed(*args):
  """RngStream_SetPackageSeed(unsigned long const [6] seed) -> bool"""
  return _MontePython_cxx.RngStream_SetPackageSeed(*args)

# This file is compatible with both classic and new-style classes.


